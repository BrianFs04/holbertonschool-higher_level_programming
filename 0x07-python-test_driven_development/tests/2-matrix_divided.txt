===========================================
	How to Use 2-matrix_divided.py
===========================================

Importing function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[4, 8], 2], 4)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([5, [6, 7]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[4, 2, 2], [6, 's', 3]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[2, 3], [6]], 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[2, 8], [6, 2]], 's')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    >>> matrix_divided([[4, 2], [6, 3]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> matrix_divided([[4, 3], [6, 8]], float(inf))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert a float infinity to integer

    >>> matrix_divided(None, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(None, None)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[2, 3], [4, 6]], None)
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
